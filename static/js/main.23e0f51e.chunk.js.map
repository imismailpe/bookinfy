{"version":3,"sources":["components/ViewUsers/DataTable.js","components/ViewUsers/ViewUsers.js","actions.js","constants.js","components/CreateUser/CreateUser.js","components/EditUser/EditTable.js","components/Spinner/Spinner.js","components/EditUser/EditUser.js","reducers.js","serviceWorker.js","index.js","containers/App.js"],"names":["DataTable","props","_id","name","email","className","to","ViewUsers","useState","usersCollection","setUsersCollection","useEffect","axios","get","then","res","data","catch","error","console","log","map","key","submitNewUser","user","dispatch","type","payload","post","submitUserUpdate","put","userid","submitUserDelete","delete","CreateUser","uName","useFormInput","uEmail","uPassword","useDispatch","alertMessage","useSelector","state","statusMessage","role","onSubmit","e","preventDefault","userObject","value","password","initialValue","setValue","onChange","target","EditTable","uId","useData","Fragment","colSpan","onClick","Spinner","EditUser","userInEdit","setUserInEdit","isLoading","setIsLoading","match","params","initialState","Boolean","window","location","hostname","store","createStore","action","Object","assign","applyMiddleware","thunk","ReactDOM","render","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23e0f51e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function DataTable({props}){\r\n    return (\r\n        <tr>\r\n            <td>\r\n                {props._id}\r\n            </td>\r\n            <td>\r\n                {props.name}\r\n            </td>\r\n            <td>\r\n                {props.email}\r\n            </td>\r\n            <td>\r\n                <Link className=\"nav-link\" to={`/edituser/${props._id}`}>Edit</Link>\r\n            </td>\r\n            \r\n        </tr>\r\n    )\r\n}","import React,{useState,useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport DataTable from './DataTable';\r\n\r\nexport default function ViewUsers(){\r\n\tconst [usersCollection,setUsersCollection] = useState([])\r\n\tuseEffect( ()=>{\r\n\t\taxios.get('http://localhost:4000/users')\r\n\t\t.then((res)=>{\r\n\t\t\tsetUsersCollection(res.data)\r\n\t\t}).catch((error)=>{\r\n\t\t\tconsole.log(error)\r\n\t\t})\r\n\t},[])\r\n\treturn(\r\n\t\t<div className=\"wrapper-users\">\r\n      <div className=\"container\">\r\n        <table className=\"table table-striped table-dark\">\r\n          <thead className=\"thead-dark\">\r\n            <tr>\r\n              <td>ID</td>\r\n              <td>Name</td>\r\n              <td>Email</td>\r\n              <td>Action</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {\r\n          \tusersCollection.map((data) => {\r\n\t\t\t\treturn <DataTable props={data} key={data._id} />\r\n\t\t\t})\r\n          }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n\t)\r\n}","import {CALLING_API,FINISHED_API} from './constants';\r\nimport axios from 'axios';\r\n\r\nexport const submitNewUser = (user) => {\r\n\treturn dispatch => {\r\n\t\tdispatch({type: CALLING_API, payload: \"Creating..\"})\r\n\t\taxios.post('http://localhost:4000/users/create',user)\r\n\t\t.then((res)=>{\r\n\t\t\tconsole.log(res.data)\r\n\t\t\tdispatch({type: FINISHED_API, payload: \"Created user successfully\"})\r\n\t\t}).catch((error)=>{\r\n\t\t\tconsole.log(error)\r\n\t\t})\r\n\t}\r\n}\r\nexport const submitUserUpdate=(user)=>{\r\n\treturn dispatch =>{\r\n\t\tconsole.log(\"updating..\",user)\r\n\t\tdispatch({type:CALLING_API, payload: \"Updating..\"})\r\n\t\taxios.put(`http://localhost:4000/users/update/${user.userid}`,user)\r\n  \t\t  .then((res)=>{\r\n\t      console.log(\"updated..\",res)\r\n\t      dispatch({type: FINISHED_API, payload: \"Updated user successfully\"})\r\n    \t}).catch((error)=>{\r\n\t      console.log(\"error--\",error)\r\n  \t  })\r\n  }\r\n}\r\nexport const submitUserDelete=(user)=>{\r\n\treturn dispatch =>{\r\n\t\tconsole.log(\"stating delete\")\r\n\t\tdispatch({type:CALLING_API, payload: \"Deleting..\"})\r\n\t\taxios.delete(`http://localhost:4000/users/delete/${user.userid}`,user)\r\n\t\t.then((res)=>{\r\n\t\t\tdispatch({type:FINISHED_API,payload: \"Deleted user successfully\"})\r\n\t\t\tconsole.log(\"deleted..\",res)\r\n\t\t}).catch((error)=>{\r\n\t\t\tconsole.log(\"error--\",error)\r\n\t\t})\r\n\t}\r\n}","export const EDITUSER = 'EDITUSER';\r\nexport const CALLING_API = 'CALLING_API';\r\nexport const FINISHED_API = 'FINISHED_API';\r\nexport const CREATE_USER = 'CREATE_USER';","import React,{useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {submitNewUser} from '../../actions';\r\n\r\nexport default function CreateUser(){\r\n\tconst uName = useFormInput('')\r\n\tconst uEmail = useFormInput('')\r\n\tconst uPassword = useFormInput('')\r\n\tconst dispatch = useDispatch()\r\n\tconst alertMessage = useSelector(state=>state.statusMessage)\r\n\r\n\tconst submitForm=(e)=>{\r\n\t\te.preventDefault();\r\n\t\tconst userObject={\r\n\t\t\tname: uName.value,\r\n\t\t\temail: uEmail.value,\r\n\t\t\tpassword: uPassword.value\r\n\t\t}\r\n\t\tdispatch(submitNewUser(userObject))\r\n\t}\r\n\r\n\treturn(\r\n\t\t<div className=\"wrapper\">\r\n\t\t\t{alertMessage?<div className=\"alert alert-success\" role=\"alert\">{alertMessage}</div>:null}\r\n\t\t\t<form onSubmit={submitForm}>\r\n\t\t\t\t<div className=\"form-group row\">\r\n\t\t\t\t\t<label className=\"col-sm-4\">Name:</label>\r\n\t\t\t\t\t<input {...uName} name=\"name\" type=\"text\" className=\"form-control col-sm-8\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"form-group row\">\r\n\t\t\t\t\t<label className=\"col-sm-4\">Email:</label>\r\n\t\t\t\t\t<input {...uEmail} type=\"email\" className=\"form-control col-sm-8\"/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"form-group row\">\r\n\t\t\t\t\t<label className=\"col-sm-4\">Password:</label>\r\n\t\t\t\t\t<input {...uPassword} type=\"password\" className=\"form-control col-sm-8\"/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button type=\"submit\" className=\"btn btn-success\">Submit</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t)\r\n}\r\nfunction useFormInput(initialValue){\r\n\tconst [value,setValue] = useState(initialValue)\r\n\tfunction handleChange(e){\r\n\t\tsetValue(e.target.value)\r\n\t}\r\n\treturn {\r\n\t\tvalue,\r\n\t\tonChange: handleChange\r\n\t}\r\n}","import React, { useState } from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {submitUserUpdate, submitUserDelete} from '../../actions';\r\n\r\nexport default function EditTable({props}){\r\n  const uId = props._id\r\n  const uName = useData(props.name)\r\n  const uEmail = useData(props.email)\r\n  const dispatch = useDispatch()\r\n\r\n  const submitUpdate = ()=>{\r\n    const userObject={\r\n      userid: uId,\r\n      name: uName.value,\r\n      email: uEmail.value\r\n    }\r\n    console.log(\"submitted data is \", userObject)\r\n    console.log(\"userid is \",props._id)\r\n    dispatch(submitUserUpdate(userObject))\r\n  }\r\n  const submitDelete = ()=>{\r\n    const userObject={\r\n      userid: uId,\r\n      name: uName.value,\r\n      email: uEmail.value\r\n    }\r\n    console.log(\"submitted data is \", userObject)\r\n    console.log(\"userid is \",props._id)\r\n    dispatch(submitUserDelete(userObject))\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <tr>\r\n          <td>Id</td>\r\n          <td>\r\n              {props._id}\r\n          </td>\r\n      </tr>\r\n      <tr>\r\n          <td>Name</td>\r\n          <td>\r\n              <input {...uName} type=\"text\"/>\r\n          </td>\r\n      </tr>\r\n      <tr>\r\n          <td>Email</td>\r\n          <td>\r\n              <input {...uEmail} type=\"email\"/>\r\n          </td>\r\n      </tr>\r\n      <tr>\r\n          <td colSpan='2'>\r\n              \t<button onClick={submitDelete}>Delete user</button>&nbsp;\r\n              \t<button onClick={submitUpdate}>Update</button>\r\n          </td>\r\n      </tr>\r\n    </React.Fragment>\r\n  )\r\n}\r\nfunction useData(initialValue){\r\n  const [value,setValue] = useState(initialValue)\r\n  \r\n  function handleChange(e){\r\n    setValue(e.target.value)\r\n  }\r\n  return{\r\n    value,\r\n    onChange: handleChange\r\n  }\r\n}","import React from 'react';\r\n\r\nexport default function Spinner(){\r\n\treturn(\r\n\t\t<span>Loading..</span>\r\n\t\t)\r\n}","import React,{useState,useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport axios from 'axios';\r\nimport EditTable from './EditTable';\r\nimport Spinner from '../Spinner/Spinner';\r\n\r\nexport default function EditUser(props){\r\n\tconst [userInEdit,setUserInEdit] = useState()\r\n\tconst [isLoading,setIsLoading] = useState(true)\r\n\tconst alertMessage = useSelector(state=>state.statusMessage)\r\n\r\n\tuseEffect(()=>{\r\n\t\tsetIsLoading(true)\r\n\t\taxios.get(`http://localhost:4000/users/edit/${props.match.params.userid}`)\r\n\t\t.then((res)=>{\r\n\t\t\tsetUserInEdit(res.data)\r\n\t\t\tsetIsLoading(false)\r\n\t\t}).catch((error)=>{\r\n\t\t\tconsole.log(error)\r\n\t\t})\r\n\t},[props.match.params.userid])\r\n\t\r\n\treturn(\r\n\t\t<div className=\"wrapper-users\">\r\n\t\t\t{alertMessage?<div className=\"alert alert-success\" role=\"alert\">{alertMessage}</div>:null}\r\n        <div className=\"container\">\r\n          <table className=\"table table-striped table-dark\">\r\n            <thead className=\"thead-dark\">\r\n              <tr>\r\n                <td>Field</td>\r\n                <td>Value</td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {isLoading?<Spinner/>:<EditTable props={userInEdit} />}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\t\t)\r\n}","import {CALLING_API,FINISHED_API} from './constants';\r\n\r\nconst initialState={\r\n\tuserInEdit:{},\r\n\tisLoading: true\r\n}\r\n\r\nexport const setDataR=(state=initialState,action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase CALLING_API:\r\n\t\t\treturn Object.assign({},state,{statusMessage: action.payload,isLoading: true})\r\n\t\tcase FINISHED_API:\r\n\t\t\treturn Object.assign({},state,{statusMessage: action.payload,isLoading: false})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './containers/App';\r\nimport {setDataR} from './reducers';\r\nimport {Provider} from 'react-redux'\r\nimport {createStore,applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store=createStore(setDataR,applyMiddleware(thunk))\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>\r\n\t, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport {BrowserRouter as Router,Route,Link,Switch } from 'react-router-dom';\r\nimport {Navbar,Nav} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ViewUsers from '../components/ViewUsers/ViewUsers';\r\nimport CreateUser from '../components/CreateUser/CreateUser';\r\nimport EditUser from '../components/EditUser/EditUser';\r\nimport '../App.css';\r\n\r\nexport default function App(){\r\n  return (\r\n    <Router>\r\n    <div className=\"App\">\r\n      <header>\r\n        <Navbar bg=\"info\" expand=\"md\">\r\n\t\t\t\t  <Navbar.Brand href=\"#\">BookInf</Navbar.Brand>\r\n\t\t\t\t  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n\t\t\t\t  <Navbar.Collapse id=\"basic-navbar-nav\">\r\n\t\t\t\t    <Nav className=\"mr-auto\">\r\n\t\t\t\t      <Link className=\"nav-link\" to={\"/createuser\"}>Create User</Link>\r\n\t\t\t\t      <Link className=\"nav-link\" to={\"/viewusers\"}>View Users</Link>\r\n\t\t\t\t    </Nav>\r\n\t\t\t\t  </Navbar.Collapse>\r\n\t\t\t\t</Navbar>\r\n      </header>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <Switch>\r\n              <Route path=\"/createuser\" component={CreateUser}/>\r\n              <Route path=\"/viewusers\" component={ViewUsers}/>\r\n              <Route path=\"/edituser/:userid/\" component={EditUser}/>\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </Router>\r\n  )\r\n}"],"sourceRoot":""}