{"version":3,"sources":["components/DataTable.js","components/ViewUsers.js","components/CreateUser.js","containers/App.js","serviceWorker.js","index.js"],"names":["DataTable","this","props","obj","_id","name","email","Component","ViewUsers","state","usersCollection","axios","get","then","res","setState","data","console","log","catch","error","map","i","key","className","dataTable","CreateUser","onNameChange","e","target","value","onEmailChange","onPasswordChange","password","onSubmit","preventDefault","userObject","post","bind","type","onChange","App","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.347596bf.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass DataTable extends Component {\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td>\r\n                    {this.props.obj._id}\r\n                </td>\r\n                <td>\r\n                    {this.props.obj.name}\r\n                </td>\r\n                <td>\r\n                    {this.props.obj.email}\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DataTable;","import React,{Component} from 'react';\r\nimport axios from 'axios';\r\nimport DataTable from './DataTable';\r\n\r\nexport default class ViewUsers extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state={\r\n\t\t\tusersCollection:[]\r\n\t\t}\r\n\t}\r\n\tcomponendDidMount(){\r\n\t\taxios.get('http://localhost:4000/users')\r\n\t\t.then((res)=>{\r\n\t\t\tthis.setState({usersCollection: res.data})\r\n\t\t\tconsole.log(this.state.usersCollection);\r\n\t\t}).catch((error)=>{\r\n\t\t\tconsole.log(error)\r\n\t\t})\r\n\t}\r\n\tdataTable() {\r\n    return this.state.usersCollection.map((data, i) => {\r\n      return <DataTable obj={data} key={i} />;\r\n    });\r\n  }\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className=\"wrapper-users\">\r\n        <div className=\"container\">\r\n          <table className=\"table table-striped table-dark\">\r\n            <thead className=\"thead-dark\">\r\n              <tr>\r\n                <td>ID</td>\r\n                <td>Name</td>\r\n                <td>Email</td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.dataTable()}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\t\t)\r\n\t}\r\n}","import React,{Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class CreateUser extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.onSubmit=this.onSubmit.bind(this);\r\n\t\tthis.onNameChange=this.onNameChange.bind(this);\r\n\t\tthis.onEmailChange=this.onEmailChange.bind(this);\r\n\t\tthis.onPasswordChange=this.onPasswordChange.bind(this);\r\n\t\tthis.state={\r\n\t\t\tname:'',\r\n\t\t\temail:'',\r\n\t\t\tpassword:''\r\n\t\t}\r\n\t}\r\n\tonNameChange=(e)=>{\r\n\t\tthis.setState({name:e.target.value})\r\n\t}\r\n\tonEmailChange=(e)=>{\r\n\t\tthis.setState({email:e.target.value})\r\n\t}\r\n\tonPasswordChange=(e)=>{\r\n\t\tthis.setState({password:e.target.value})\r\n\t}\r\n\tonSubmit=(e)=>{\r\n\t\te.preventDefault();\r\n\t\tconst userObject={\r\n\t\t\tname: this.state.name,\r\n\t\t\temail: this.state.email,\r\n\t\t\tpassword: this.state.password\r\n\t\t}\r\n\t\taxios.post('http://localhost:4000/create',userObject)\r\n\t\t\t.then((res)=>{\r\n\t\t\t\tconsole.log(res.data)\r\n\t\t\t}).catch((error)=>{\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t})\r\n\t\tthis.setState({\r\n\t\t\tname:'',\r\n\t\t\temail:'',\r\n\t\t\tpassword:''\r\n\t\t})\r\n\t}\r\n\trender(){\r\n\treturn(\r\n\t\t<div className=\"wrapper\">\r\n\t\t\t<form onSubmit={this.onSubmit}>\r\n\t\t\t\t<div className=\"form-group row\">\r\n\t\t\t\t\t<label className=\"col-sm-4\">Name:</label>\r\n\t\t\t\t\t<input name=\"name\" type=\"text\" className=\"form-control col-sm-8\" onChange={this.onNameChange}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"form-group row\">\r\n\t\t\t\t\t<label className=\"col-sm-4\">Email:</label>\r\n\t\t\t\t\t<input type=\"email\" className=\"form-control col-sm-8\" onChange={this.onEmailChange}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"form-group row\">\r\n\t\t\t\t\t<label className=\"col-sm-4\">Password:</label>\r\n\t\t\t\t\t<input type=\"password\" className=\"form-control col-sm-8\" onChange={this.onPasswordChange}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button type=\"submit\" className=\"btn btn-success\">Submit</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t)\r\n}\r\n}\r\n","import React,{Component} from 'react';\nimport '../App.css';\nimport {BrowserRouter as Router,Route,Link,Switch } from 'react-router-dom';\nimport {Navbar,Nav} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ViewUsers from '../components/ViewUsers';\nimport CreateUser from '../components/CreateUser';\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n  }\n  render(){\n  return (\n    <Router>\n    <div className=\"App\">\n      <header>\n        <Navbar bg=\"info\" expand=\"md\">\n\t\t\t\t  <Navbar.Brand href=\"#\">BookInf</Navbar.Brand>\n\t\t\t\t  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\t\t\t\t  <Navbar.Collapse id=\"basic-navbar-nav\">\n\t\t\t\t    <Nav className=\"mr-auto\">\n\t\t\t\t      <Link className=\"nav-link\" to={\"/createuser\"}>Create User</Link>\n\t\t\t\t      <Link className=\"nav-link\" to={\"/viewusers\"}>View Users</Link>\n\t\t\t\t    </Nav>\n\t\t\t\t  </Navbar.Collapse>\n\t\t\t\t</Navbar>\n      </header>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <Switch>\n              <Route exact path=\"/\" component={ViewUsers}/>\n              <Route path=\"/createuser\" component={CreateUser}/>\n              <Route path=\"/viewusers\" component={ViewUsers}/>\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </div>\n    </Router>\n  )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t\t<App />\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}